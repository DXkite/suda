
namespace db;

use Query;

class {{ $_SQL->name }}

{
	<?php 
		$primary_key=key($_SQL->primary);
		$primary_type=preg_match('/int/i', current($_SQL->primary))?'int':'string'; 
	?>
    <?php $set_update=[] ; $set_create=[] ;$create_params=[];$update_params=[]; ?>
    @foreach ($_SQL->fields() as $name => $type)<?php  $type=preg_match('/int/i', $type)?'int':'string';$set_update[]= "'$name'=>\${$name}";?>
      @if ($this->getAuto() == $name)
        <?php $update_params[]=$type .' $'.$name; ?>
       @else
        <?php $set_create[]= "'$name'=>\${$name}"; $create_params[]=$type .' $'.$name; ?>
       @endif
    @endforeach
    <?php $set_update=implode(',',$set_update);  $set_create=implode(',',$set_create);  $update_params=array_merge($update_params, $create_params); $create_params=implode(',', $create_params);$update_params=implode(',', $update_params);?>
	
	/**
	* Create A Item
	* @return the id of item
	*/
    public function create({{$create_params}})
    {
        return Query::insert('{{$this->getTableName()}}',[{{!$set_create}}]);
    }
	
	/**
	*  	Delete A Item By Primary Key
	*	@return rows
	*/
	public function delete({{$primary_type}} ${{$primary_key}}){
        return Query::delete('{{$this->getTableName()}}',['{{$primary_key}}'=>${{$primary_key}}]);
    }
	
	/**
	*  	get A Item By Primary Key 
	* 	@return item
	*/  
	public function get({{$primary_type}} ${{$primary_key}})
    {
        return ($get=Query::where('{{$this->getTableName()}}', {{$this->getFieldsStr()}},['{{$primary_key}}'=>${{$primary_key}}])->fetch()) ? $get  : false;
    }
	
	@foreach  ($_SQL->keys as $key => $type) 
	
	/**
	* Get By {{$key}} {{$type}}  
	*/<?php $type=preg_match('/int/i', $type)?'int':'string'; ?> 
	public function getBy{{ ucfirst($key) }}({{$type}} ${{$key}})
    {
        return ($get=Query::where('{{$this->getTableName()}}', {{$this->getFieldsStr($key)}},['{{$key}}'=>${{$key}}])->fetch()) ? $get  : false;
    }
	
	@endforeach 
    public function update({{$primary_type}} ${{$primary_key}},{{ $this->updataParams() }}){
	   $sets=[];
	   @foreach ($_SQL->fields() as $name => $type) 
	   if  (!is_null(${{$name}}))
	   {
		   $sets['{{$name}}']=${{$name}};
	   }
       @endforeach 
       return Query::update('{{$this->getTableName()}}',$sets,['{{$primary_key}}'=>${{$primary_key}}]); 
    }
    public function list(int $page=1, int $count=10)
    {
        return Query::where('{{$this->getTableName()}}', {{$this->getFieldsStr()}}, '1', [], [$page, $count])->fetchAll();
    }
}